name: Deploy Microservices to Environment

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Entorno de despliegue'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: paqueteturisiticoscontainer.azurecr.io
  REPOSITORY: santiprimerproyecto
  FRONTEND_IMAGE: paqueteturisiticoscontainer.azurecr.io/santiprimerproyecto:frontend
  BACKEND_IMAGE: paqueteturisiticoscontainer.azurecr.io/santiprimerproyecto:backend
  STAGING_FRONTEND_URL: http://localhost:3000
  STAGING_BACKEND_URL: http://localhost:3001
  PROD_FRONTEND_URL: http://your-prod-domain.com
  PROD_BACKEND_URL: http://api.your-prod-domain.com

permissions:
  contents: read

jobs:
  deploy-microservices:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Log in to Azure Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
        password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}
        
    # Determinar variables según el entorno
    - name: Set environment variables
      id: set-env
      run: |
        if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
          echo "FRONTEND_URL=${{ env.PROD_FRONTEND_URL }}" >> $GITHUB_ENV
          echo "BACKEND_URL=${{ env.PROD_BACKEND_URL }}" >> $GITHUB_ENV
          echo "env_name=production" >> $GITHUB_OUTPUT
        else
          echo "FRONTEND_URL=${{ env.STAGING_FRONTEND_URL }}" >> $GITHUB_ENV
          echo "BACKEND_URL=${{ env.STAGING_BACKEND_URL }}" >> $GITHUB_ENV
          echo "env_name=staging" >> $GITHUB_OUTPUT
        fi
        
    # Construir y subir imagen del frontend
    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ env.FRONTEND_IMAGE }}
        build-args: |
          BACKEND_URL=${{ github.event.inputs.environment == 'production' && env.PROD_BACKEND_URL || env.STAGING_BACKEND_URL }}
        
    # Construir y subir imagen del backend
    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ env.BACKEND_IMAGE }}
        build-args: |
          BACKEND_URL=${{ github.event.inputs.environment == 'production' && env.PROD_BACKEND_URL || env.STAGING_BACKEND_URL }}
          
    # Crear archivo docker-compose para el despliegue
    - name: Preparar docker-compose para despliegue
      run: |
        cat > docker-compose.deploy.yml << EOF
        version: '3.8'
        
        services:
          backend:
            image: ${REGISTRY}/${BACKEND_IMAGE}
            deploy:
              replicas: 1
              restart_policy:
                condition: on-failure
            ports:
              - "3001:3000"
            environment:
              - NODE_ENV=production
              - PORT=3000
              - LOG_LEVEL=info
              - API_VERSION=v1
              - CORS_ORIGIN=${FRONTEND_URL}
            healthcheck:
              test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
              interval: 30s
              timeout: 5s
              retries: 3
        
          frontend:
            image: ${REGISTRY}/${FRONTEND_IMAGE}
            deploy:
              replicas: 1
              restart_policy:
                condition: on-failure
            ports:
              - "3000:3000"
            environment:
              - NODE_ENV=production
              - PORT=3000
              - BACKEND_URL=http://backend:3000/
              - API_TIMEOUT=30000
            command: ["node", "server.js"]
            healthcheck:
              test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
              interval: 30s
              timeout: 5s
              retries: 3
            depends_on:
              - backend
        
        networks:
          default:
            driver: bridge
        EOF
        
        cat docker-compose.deploy.yml
        
    # Archivo de despliegue como artefacto
    - name: Upload deployment files
      uses: actions/upload-artifact@v3
      with:
        name: deployment-files-${{ steps.set-env.outputs.env_name }}
        path: |
          docker-compose.deploy.yml
        
    # Nota: El despliegue real dependería del entorno específico (Kubernetes, Docker Swarm, etc.)
    # Añadir los pasos específicos para tu plataforma de despliegue a continuación
    
    # Ejemplo para despliegue SSH en servidor remoto (deshabilitado por defecto)
    - name: Deploy to server via SSH
      if: false # Cambiar a true cuando esté configurado
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          mkdir -p ~/microservices-deploy
          cd ~/microservices-deploy
          echo "${{ secrets.AZURE_REGISTRY_PASSWORD }}" | docker login ${{ env.REGISTRY }} -u ${{ secrets.AZURE_REGISTRY_USERNAME }} --password-stdin
          wget -O docker-compose.yml ${{ github.server_url }}/${{ github.repository }}/raw/${{ github.sha }}/docker-compose.deploy.yml
          docker compose pull
          docker compose up -d