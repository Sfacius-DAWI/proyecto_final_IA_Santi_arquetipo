name: Multi-Container Docker Deploy to Azure

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: your-app-name    # Nombre de tu Azure Web App
  CONTAINER_REGISTRY: miprimeracontenedorazure.azurecr.io  # URL de Azure Container Registry
  FRONTEND_IMAGE: santiprimerproyecto-frontend
  BACKEND_IMAGE: santiprimerproyecto-backend
  IMAGE_TAG: latest  # Tag para las imágenes

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Log in to Azure Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
        
    # Construir y subir imagen del frontend
    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ env.CONTAINER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ env.IMAGE_TAG }}
        
    # Construir y subir imagen del backend
    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ env.CONTAINER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ env.IMAGE_TAG }}
        
    # Crear el docker-compose.yml para Azure
    - name: Create Azure docker-compose.yml
      run: |
        cat > docker-compose.azure.yml << 'EOL'
        version: '3.8'
        services:
          backend:
            image: ${CONTAINER_REGISTRY}/${BACKEND_IMAGE}:${IMAGE_TAG}
            expose:
              - "3000"
              - "2222"
            environment:
              - NODE_ENV=production
              - SSH_PASSWD=root:Docker!
              - WEBSITES_ENABLE_APP_SERVICE_STORAGE=true
              - WEBSITES_PORT=3000
              - PORT=3000
              - WEBSITES_CONTAINER_START_TIME_LIMIT=900
              - LOG_LEVEL=info
            networks:
              app_network:
                aliases:
                  - backend
        
          frontend:
            image: ${CONTAINER_REGISTRY}/${FRONTEND_IMAGE}:${IMAGE_TAG}
            expose:
              - "80"
            environment:
              - BACKEND_URL=/api/
              - NODE_ENV=production
              - API_TIMEOUT=30000
            depends_on:
              - backend
            networks:
              app_network:
                aliases:
                  - frontend
        
          proxy:
            image: nginx:alpine
            ports:
              - "80:80"
            volumes:
              - ./proxy/nginx.conf:/etc/nginx/conf.d/default.conf
            depends_on:
              - frontend
              - backend
            networks:
              app_network:
                aliases:
                  - proxy
        
        networks:
          app_network:
            driver: bridge
        EOL
        envsubst < docker-compose.azure.yml > docker-compose.azure.processed.yml
        cat docker-compose.azure.processed.yml
        
    - name: Upload docker-compose file as artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-compose-files
        path: |
          docker-compose.azure.processed.yml
          ./proxy/nginx.conf
          
    # Verificar conexión a Azure con CLI
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Verificar que la Web App existe
    - name: Check Azure Web App existence
      run: |
        echo "Verificando existencia de la aplicación web ${AZURE_WEBAPP_NAME}..."
        APP_JSON=$(az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group your-resource-group --query "{name:name,kind:kind,state:state}" -o json || echo '{"name":"","kind":"","state":""}')
        echo "Información de la aplicación:"
        echo "$APP_JSON"
        
        if [[ $(echo "$APP_JSON" | jq -r '.name') == "" ]]; then
          echo "⚠️ ADVERTENCIA: La aplicación web '${{ env.AZURE_WEBAPP_NAME }}' no existe o no es accesible. Verifica el nombre y los permisos."
          echo "Si necesitas crear una, ejecuta:"
          echo "az webapp create --resource-group <tu-grupo-recursos> --plan <tu-plan-app-service> --name ${{ env.AZURE_WEBAPP_NAME }} --multicontainer-config-type compose --multicontainer-config-file docker-compose.azure.processed.yml"
        else
          echo "✅ Aplicación web encontrada: $(echo "$APP_JSON" | jq -r '.name')"
          echo "Tipo: $(echo "$APP_JSON" | jq -r '.kind')"
          echo "Estado: $(echo "$APP_JSON" | jq -r '.state')"
          
          # Verificar si es una aplicación multicontenedor
          if [[ ! $(echo "$APP_JSON" | jq -r '.kind') == *"container"* ]]; then
            echo "⚠️ ADVERTENCIA: La aplicación no parece ser de tipo contenedor. Debe ser un 'Web App for Containers'."
          fi
        fi
        
    # Desplegar a Azure Web App for Containers (Multi-container)
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        images: '${{ env.CONTAINER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ env.IMAGE_TAG }}, ${{ env.CONTAINER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ env.IMAGE_TAG }}'
        configuration-file: docker-compose.azure.processed.yml