name: Microservices CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Entorno de despliegue'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  AZURE_REGISTRY: paqueteturisiticoscontainer.azurecr.io
  FRONTEND_IMAGE_NAME: mi-arquetipo-santi/frontend
  BACKEND_IMAGE_NAME: mi-arquetipo-santi/backend
  NODE_VERSION: '18'

jobs:
  # Job para pruebas y linting
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, backend]
    
    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v4
        
      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ matrix.service }}/package-lock.json'
          
      - name: Instalar dependencias
        run: |
          cd ${{ matrix.service }}
          npm ci
          
      - name: Ejecutar linting (Frontend)
        if: matrix.service == 'frontend'
        run: |
          cd frontend
          npm run lint
          
      - name: Ejecutar build
        run: |
          cd ${{ matrix.service }}
          npm run build
          
      - name: Ejecutar tests (si existen)
        run: |
          cd ${{ matrix.service }}
          if grep -q '"test":' package.json; then
            npm test
          else
            echo "No hay tests configurados para ${{ matrix.service }}"
          fi

  # Job para construir y probar imÃ¡genes Docker
  build-and-test-docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v4
        
      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Verificar imÃ¡genes base
        run: |
          docker pull node:18-alpine
          
      - name: Construir imagen del backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          load: true
          tags: backend-test:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Construir imagen del frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          load: true
          tags: frontend-test:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Probar contenedores
        run: |
          # Crear red para pruebas
          docker network create test-network
          
          # Iniciar backend
          docker run -d --name backend-test --network test-network \
            -e NODE_ENV=test \
            -e PORT=3001 \
            -e DATABASE_URL=postgresql://test:test@localhost:5432/test \
            -e OPENAI_API_KEY=test-key \
            -e ASSISTANT_OPENAI_ID=test-assistant \
            backend-test:latest
            
          # Esperar que el backend estÃ© listo
          sleep 10
          
          # Iniciar frontend
          docker run -d --name frontend-test --network test-network \
            -e NODE_ENV=test \
            -e VITE_API_URL=http://backend-test:3001 \
            frontend-test:latest
            
          # Verificar que los contenedores estÃ©n corriendo
          docker ps
          
          # Verificar logs en caso de error
          if ! docker ps | grep -q "backend-test.*Up"; then
            echo "Backend container failed:"
            docker logs backend-test
            exit 1
          fi
          
          if ! docker ps | grep -q "frontend-test.*Up"; then
            echo "Frontend container failed:"
            docker logs frontend-test
            exit 1
          fi
          
      - name: Limpiar contenedores de prueba
        if: always()
        run: |
          docker stop backend-test frontend-test || true
          docker rm backend-test frontend-test || true
          docker network rm test-network || true

  # Job para desplegar a Azure
  deploy:
    runs-on: ubuntu-latest
    needs: [test, build-and-test-docker]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v4
        
      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login a Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.AZURE_REGISTRY }}
          username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}
          
      - name: Determinar etiquetas de imagen
        id: image-tags
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "frontend_tag=${{ env.AZURE_REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:v${{ github.run_number }}" >> $GITHUB_OUTPUT
            echo "backend_tag=${{ env.AZURE_REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:v${{ github.run_number }}" >> $GITHUB_OUTPUT
            echo "frontend_latest=${{ env.AZURE_REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
            echo "backend_latest=${{ env.AZURE_REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
          else
            echo "frontend_tag=${{ env.AZURE_REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:staging-${{ github.run_number }}" >> $GITHUB_OUTPUT
            echo "backend_tag=${{ env.AZURE_REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:staging-${{ github.run_number }}" >> $GITHUB_OUTPUT
            echo "frontend_latest=${{ env.AZURE_REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:staging" >> $GITHUB_OUTPUT
            echo "backend_latest=${{ env.AZURE_REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:staging" >> $GITHUB_OUTPUT
          fi
          
      - name: Construir y subir imagen del backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ steps.image-tags.outputs.backend_tag }}
            ${{ steps.image-tags.outputs.backend_latest }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Construir y subir imagen del frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ steps.image-tags.outputs.frontend_tag }}
            ${{ steps.image-tags.outputs.frontend_latest }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Deploy a Azure Container Apps (Backend)
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'mi-arquetipo-backend'
          slot-name: 'production'
          publish-profile: ${{ secrets.AZURE_BACKEND_PUBLISH_PROFILE }}
          images: ${{ steps.image-tags.outputs.backend_tag }}
          
      - name: Deploy a Azure Container Apps (Frontend)
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'mi-arquetipo-frontend'
          slot-name: 'production'
          publish-profile: ${{ secrets.AZURE_FRONTEND_PUBLISH_PROFILE }}
          images: ${{ steps.image-tags.outputs.frontend_tag }}
          
      - name: Crear resumen del despliegue
        run: |
          echo "## ðŸš€ Despliegue Completado" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ImÃ¡genes desplegadas:" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: \`${{ steps.image-tags.outputs.backend_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: \`${{ steps.image-tags.outputs.frontend_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Entorno: \`${{ github.event.inputs.environment || 'staging' }}\`" >> $GITHUB_STEP_SUMMARY 