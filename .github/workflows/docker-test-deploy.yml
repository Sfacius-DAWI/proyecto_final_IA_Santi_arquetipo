name: Microservices Docker Test & Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-docker-images:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Configuración de Docker BuildX
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Verificar disponibilidad de imágenes base
      - name: Check base images availability
        run: |
          docker pull node:18-alpine || { echo "Error: Base image for Node not found"; exit 1; }
      
      # Construir la imagen de frontend
      - name: Build frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          load: true
          tags: santiprimerproyecto:frontend-test
      
      # Construir la imagen de backend
      - name: Build backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          load: true
          tags: santiprimerproyecto:backend-test
      
      # Verificar estructura de la imagen frontend
      - name: Verify frontend image
        run: |
          # Verifica que la imagen tenga el comando correcto
          CMD=$(docker inspect --format='{{json .Config.Cmd}}' santiprimerproyecto:frontend-test)
          if [[ ! "$CMD" == *"server.js"* ]] && [[ ! "$CMD" == *"node"* ]]; then
            echo "ERROR: La imagen frontend no tiene el comando node server.js configurado"
            echo "Comando actual: $CMD"
            exit 1
          fi
          
          # Verifica que la imagen exponga el puerto correcto (3000)
          PORTS=$(docker inspect --format='{{json .Config.ExposedPorts}}' santiprimerproyecto:frontend-test)
          if [[ ! "$PORTS" == *"3000"* ]]; then
            echo "ERROR: La imagen frontend no expone el puerto 3000"
            echo "Puertos expuestos: $PORTS"
            exit 1
          fi
          
          echo "✅ Frontend image verificada correctamente"
      
      # Verificar estructura de la imagen backend
      - name: Verify backend image
        run: |
          # Verifica que la imagen tenga el comando correcto
          CMD=$(docker inspect --format='{{json .Config.Cmd}}' santiprimerproyecto:backend-test)
          if [[ ! "$CMD" == *"server"* ]] && [[ ! "$CMD" == *"node"* ]]; then
            echo "ERROR: La imagen backend no tiene el comando node configurado"
            echo "Comando actual: $CMD" 
            exit 1
          fi
          
          # Verifica que la imagen exponga el puerto 3000
          PORTS=$(docker inspect --format='{{json .Config.ExposedPorts}}' santiprimerproyecto:backend-test)
          if [[ ! "$PORTS" == *"3000"* ]]; then
            echo "ERROR: La imagen backend no expone el puerto 3000"
            echo "Puertos expuestos: $PORTS"
            exit 1
          fi
          
          echo "✅ Backend image verificada correctamente"
      
      # Prueba de arranque de frontend
      - name: Test frontend container startup
        run: |
          # Crear red para pruebas
          docker network create test-network
          
          # Inicia primero el backend para que el frontend pueda conectarse
          docker run -d --name backend-test --network test-network \
            -e NODE_ENV=production \
            -e PORT=3000 \
            -e LOG_LEVEL=info \
            -e API_VERSION=v1 \
            -e CORS_ORIGIN=http://localhost:3000 \
            santiprimerproyecto:backend-test
            
          # Inicia el contenedor frontend con variables de entorno para microservicios
          docker run -d --name frontend-test --network test-network -p 3000:3000 \
            -e NODE_ENV=production \
            -e PORT=3000 \
            -e BACKEND_URL=http://backend-test:3000/ \
            -e API_TIMEOUT=30000 \
            santiprimerproyecto:frontend-test
          
          # Espera a que los contenedores estén listos
          sleep 20
          
          # Verifica que el contenedor frontend esté ejecutándose
          STATUS=$(docker inspect --format='{{.State.Status}}' frontend-test)
          if [ "$STATUS" != "running" ]; then
            echo "ERROR: El contenedor frontend no arrancó correctamente"
            docker logs frontend-test
            exit 1
          fi
          
          # Intenta hacer una petición HTTP al healthcheck
          curl -s --retry 5 --retry-delay 2 --retry-connrefused http://localhost:3000/health -o /dev/null
          if [ $? -ne 0 ]; then
            echo "ERROR: No se pudo conectar al frontend en el puerto 3000"
            docker logs frontend-test
            exit 1
          fi
          
          echo "✅ Frontend container arrancado correctamente"
      
      # Limpiar contenedores de prueba
      - name: Cleanup test containers
        if: always()
        run: |
          docker stop frontend-test backend-test || true
          docker rm frontend-test backend-test || true
          docker network rm test-network || true
      
      # Login a Container Registry (Azure Container Registry)
      - name: Login to Azure Container Registry
        if: success() && github.event_name != 'pull_request'
        uses: azure/docker-login@v1
        with:
          login-server: paqueteturisiticoscontainer.azurecr.io
          username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}
      
      # Tag y push de las imágenes
      - name: Tag and push images
        if: success() && github.event_name != 'pull_request'
        run: |
          # Tag imágenes
          docker tag santiprimerproyecto:frontend-test paqueteturisiticoscontainer.azurecr.io/santiprimerproyecto:frontend
          docker tag santiprimerproyecto:backend-test paqueteturisiticoscontainer.azurecr.io/santiprimerproyecto:backend
          
          # Push imágenes
          docker push paqueteturisiticoscontainer.azurecr.io/santiprimerproyecto:frontend
          docker push paqueteturisiticoscontainer.azurecr.io/santiprimerproyecto:backend
          
          echo "✅ Imágenes subidas a Azure Container Registry" 