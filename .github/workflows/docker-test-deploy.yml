name: Docker Image Test & Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-docker-images:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Configuraci√≥n de Docker BuildX
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Verificar disponibilidad de im√°genes base
      - name: Check base images availability
        run: |
          docker pull node:18-alpine || { echo "Error: Base image for Node not found"; exit 1; }
          docker pull nginx:alpine || { echo "Error: Base image for Nginx not found"; exit 1; }
      
      # Construir la imagen de frontend
      - name: Build frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend  # Ajusta la ruta seg√∫n tu estructura
          file: ./frontend/Dockerfile
          push: false
          load: true
          tags: santiprimerproyecto:frontend-test
      
      # Construir la imagen de backend
      - name: Build backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend  # Ajusta la ruta seg√∫n tu estructura
          file: ./backend/Dockerfile
          push: false
          load: true
          tags: santiprimerproyecto:backend-test
      
      # Verificar estructura de la imagen frontend
      - name: Verify frontend image
        run: |
          # Verifica que la imagen tenga el punto de entrada correcto
          ENTRYPOINT=$(docker inspect --format='{{json .Config.Entrypoint}}' santiprimerproyecto:frontend-test)
          if [ "$ENTRYPOINT" == "null" ]; then
            echo "ERROR: La imagen frontend no tiene punto de entrada definido"
            exit 1
          fi
          # Verifica que la imagen exponga el puerto correcto (80)
          PORTS=$(docker inspect --format='{{json .Config.ExposedPorts}}' santiprimerproyecto:frontend-test)
          if [[ ! "$PORTS" == *"80"* ]]; then
            echo "ERROR: La imagen frontend no expone el puerto 80 que se define en docker-compose"
            exit 1
          fi
          echo "‚úÖ Frontend image verificada correctamente"
      
      # Verificar estructura de la imagen backend
      - name: Verify backend image
        run: |
          # Verifica que la imagen tenga el punto de entrada correcto
          ENTRYPOINT=$(docker inspect --format='{{json .Config.Entrypoint}}' santiprimerproyecto:backend-test)
          if [ "$ENTRYPOINT" == "null" ]; then
            echo "ERROR: La imagen backend no tiene punto de entrada definido"
            exit 1
          fi
          # Verifica que la imagen exponga los puertos correctos (3000 y 2222)
          PORTS=$(docker inspect --format='{{json .Config.ExposedPorts}}' santiprimerproyecto:backend-test)
          if [[ ! "$PORTS" == *"3000"* ]]; then
            echo "ERROR: La imagen backend no expone el puerto 3000 que Azure espera seg√∫n WEBSITES_PORT"
            exit 1
          fi
          echo "‚úÖ Backend image verificada correctamente"
      
      # Prueba de arranque de frontend
      - name: Test frontend container startup
        run: |
          # Inicia el contenedor con variables de entorno similares a Azure
          docker run -d --name frontend-test -p 80:80 \
            -e BACKEND_URL=/api/ \
            -e NODE_ENV=production \
            -e API_TIMEOUT=30000 \
            santiprimerproyecto:frontend-test
          
          # Espera a que el contenedor est√© listo (ajusta el tiempo seg√∫n tu aplicaci√≥n)
          sleep 15
          
          # Verifica que el contenedor est√© ejecut√°ndose
          STATUS=$(docker inspect --format='{{.State.Status}}' frontend-test)
          if [ "$STATUS" != "running" ]; then
            echo "ERROR: El contenedor frontend no arranc√≥ correctamente"
            docker logs frontend-test
            exit 1
          fi
          
          # Intenta hacer una petici√≥n HTTP b√°sica
          curl -s --retry 5 --retry-delay 2 --retry-connrefused http://localhost:80/ -o /dev/null
          if [ $? -ne 0 ]; then
            echo "ERROR: No se pudo conectar al frontend en el puerto 80"
            docker logs frontend-test
            exit 1
          fi
          
          echo "‚úÖ Frontend container arrancado correctamente"
          docker stop frontend-test
          docker rm frontend-test
      
      # Prueba de arranque de backend
      - name: Test backend container startup
        run: |
          # Inicia el contenedor con variables de entorno similares a Azure
          docker run -d --name backend-test -p 3000:3000 \
            -e NODE_ENV=production \
            -e WEBSITES_ENABLE_APP_SERVICE_STORAGE=true \
            -e WEBSITES_PORT=3000 \
            -e PORT=3000 \
            -e WEBSITES_CONTAINER_START_TIME_LIMIT=900 \
            -e LOG_LEVEL=info \
            santiprimerproyecto:backend-test
          
          # Espera a que el contenedor est√© listo
          sleep 15
          
          # Verifica que el contenedor est√© ejecut√°ndose
          STATUS=$(docker inspect --format='{{.State.Status}}' backend-test)
          if [ "$STATUS" != "running" ]; then
            echo "ERROR: El contenedor backend no arranc√≥ correctamente"
            docker logs backend-test
            exit 1
          fi
          
          # Verifica que la API responda (ajusta la ruta seg√∫n tu backend)
          curl -s --retry 5 --retry-delay 2 --retry-connrefused http://localhost:3000/health -o /dev/null
          if [ $? -ne 0 ]; then
            echo "WARNING: No se pudo conectar al endpoint de health. Es posible que necesite ajustar la ruta de la API."
            # No fallaremos aqu√≠ porque puede que no haya un endpoint /health
          fi
          
          echo "‚úÖ Backend container arrancado correctamente"
          docker stop backend-test
          docker rm backend-test
      
      # Si todo pasa, login a Azure Container Registry y push de im√°genes
      - name: Login to Azure Container Registry
        if: success() && github.event_name != 'pull_request'
        uses: azure/docker-login@v1
        with:
          login-server: miprimeracontenedorazure.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      # Tag y push de las im√°genes a ACR
      - name: Tag and push images to ACR
        if: success() && github.event_name != 'pull_request'
        run: |
          # Tag im√°genes
          docker tag santiprimerproyecto:frontend-test miprimeracontenedorazure.azurecr.io/santiprimerproyecto:frontend
          docker tag santiprimerproyecto:backend-test miprimeracontenedorazure.azurecr.io/santiprimerproyecto:backend
          
          # Push im√°genes
          docker push miprimeracontenedorazure.azurecr.io/santiprimerproyecto:frontend
          docker push miprimeracontenedorazure.azurecr.io/santiprimerproyecto:backend
          
          echo "‚úÖ Im√°genes subidas a Azure Container Registry"
      
      # Opcional: Notificaci√≥n de √©xito
      - name: Notificaci√≥n de despliegue exitoso
        if: success() && github.event_name != 'pull_request'
        run: |
          echo "üöÄ Todas las im√°genes han sido probadas y desplegadas exitosamente." 