# Eliminamos la versión obsoleta, Compose v2 no la necesita
version: '3.8' # Es recomendable especificar una versión

services:
  backend:
    image: santidaw/santiprimerproyecto:backend
    container_name: mi-arquetipo-backend
    build:
      context: ./backend
    ports:
      - "3000:3000" # Exponemos el puerto para depuración
      - "2222:2222" # Puerto SSH para Azure
    environment:
      - NODE_ENV=production
      # Añadir variables de entorno para SSH
      - SSH_PASSWD=root:Docker!
      - WEBSITES_ENABLE_APP_SERVICE_STORAGE=true
    volumes:
      - ./backend:/app
      - /app/node_modules
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - app_network # Aseguramos que todos los servicios estén en la misma red

  frontend:
    image: santidaw/santiprimerproyecto:frontend
    container_name: mi-arquetipo-frontend
    build:
      context: ./frontend
    ports:
      - "8080:80" # Exponemos el puerto para depuración
    environment:
      - BACKEND_URL=/api/ # La URL del backend ahora es relativa y será enrutada por Nginx
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - app_network # Aseguramos que todos los servicios estén en la misma red

  proxy:
    image: nginx:latest # Usamos la imagen oficial de Nginx
    container_name: reverse-proxy
    ports:
      - "80:80" # Mapeamos el puerto 80 del host al puerto 80 del contenedor Nginx
    volumes:
      - ./proxy/nginx.conf:/etc/nginx/conf.d/default.conf # Montamos nuestra configuración de Nginx
    depends_on:
      - frontend
      - backend
    links:
      - frontend:mi-arquetipo-frontend
      - backend:mi-arquetipo-backend
    networks:
      - app_network # Aseguramos que todos los servicios estén en la misma red

networks:
  app_network:
    driver: bridge 