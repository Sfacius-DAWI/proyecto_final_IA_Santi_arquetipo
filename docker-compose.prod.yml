version: '3.8'

services:
  backend:
    image: santidaw/santiprimerproyecto:backend
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
      - API_VERSION=v1
      - CORS_ORIGIN=http://localhost:3000
      # Variables de base de datos de producci√≥n
      - DATABASE_URL=${DATABASE_URL}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_SSL=${POSTGRES_SSL:-true}
      - DB_CONNECTION_REQUIRED=true
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      app_network:
        aliases:
          - backend

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: santidaw/santiprimerproyecto:frontend
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - BACKEND_URL=http://backend:3000/
      - API_TIMEOUT=30000
    command: ["node", "server.js"]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      app_network:
        aliases:
          - frontend
    depends_on:
      - backend

networks:
  app_network:
    driver: bridge